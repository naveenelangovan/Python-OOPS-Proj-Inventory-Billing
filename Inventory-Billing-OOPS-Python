class Inventory_Management:
    def __init__(self, name, quality, quantity, stock, price):
        self.name = name
        self.quality = quality
        self.quantity = quantity
        self.stock = stock
        self.price = price

    def quality_price(self):
        if self.quality == 1:
            print("FIRST CLASS PRODUCT COST EXTRA 1000")
            return 1000
        elif self.quality == 2:
            print("SECOND CLASS PRODUCT COST EXTRA 500") 
            return 500
        else:
            return 0
            
    def check_stock(self):
        if self.quantity <= self.stock:
            self.stock -= self.quantity
            print(f"Stock updated")
            print(f"Remaining stock: {self.stock} kg.")
            print()
            return True
        else:
            print(f"Cannot sell {self.quantity} kg. Only {self.stock} kg available.")
            return False

    def total_price(self, distance):
        total_quality_price = self.quality_price()

        if distance <= 10:
            travel_cost = 0
            print(f"Travel cost is free for {distance} km.")
        elif distance <= 20:
            travel_cost = 1000
            print(f"Travel cost is {travel_cost} for {distance} km.")
        else:
            travel_cost = 0
            print(f"As the mentioned distance is {distance} km.")
            print("You have to arrange your own transportation as our service is only available within 20 km range.")
            print()

        billing_price = ((self.price + total_quality_price) * self.quantity) + travel_cost
        return billing_price
        
    def details(self):
        print()
        print(f"Wood Name: {self.name}")
        print(f"Price per kg is RS {self.price}")
        print(f"Quality - {self.quality} Class Product")
        print(f"Quantity: {self.quantity} kg")
        print(f"Stock available: {self.stock} kg")
        print()

class Sandalwood(Inventory_Management):
    def __init__(self, quality, quantity):
        super().__init__("Sandalwood", quality, quantity, stock=50, price=5000)

class Oak(Inventory_Management):
    def __init__(self, quality, quantity):
        super().__init__("Oak", quality, quantity, stock=120, price=2000)

class Teakwood(Inventory_Management):
    def __init__(self, quality, quantity):
        super().__init__("Teakwood", quality, quantity, stock=85, price=1500)

class Rosewood(Inventory_Management):
    def __init__(self, quality, quantity):
        super().__init__("Rosewood", quality, quantity, stock=150, price=3500)

class Bamboowood(Inventory_Management):
    def __init__(self, quality, quantity):
        super().__init__("Bamboowood", quality, quantity, stock=50, price=1700)

wood_name = input("Enter the wood type (Sandalwood/Oak/Teakwood/Rosewood/Bamboowood): ").capitalize()
quality = int(input("Enter the quality (1 for First Class, 2 for Second Class, 3 for Third Class): "))
quantity = int(input("Enter the quantity (in kg): "))
distance = int(input("Enter the distance (in km): "))

if wood_name == "Sandalwood":
    wood = Sandalwood(quality, quantity)
elif wood_name == "Oak":
    wood = Oak(quality, quantity)
elif wood_name == "Teakwood":
    wood = Teakwood(quality, quantity)
elif wood_name == "Rosewood":
    wood = Rosewood(quality, quantity)
elif wood_name == "Bamboowood":
    wood = Bamboowood(quality, quantity)
else:
    print("Invalid wood type!")
    exit() #stop the execution of the program

wood.details()
if wood.check_stock():
    total_price = wood.total_price(distance)
    print()
    print(f"Total Price for {quantity} kg is RS {total_price}")
else:
    print("Transaction failed due to insufficient stock.")
    exit()
